name: My First Workflow

on: 
  push:
    branches:
      - main

  repository_dispatch:
    types: [event1, event2]

  workflow_dispatch:
    inputs:
      homedrive:
        description: "The home drive on the machine"
        required: true
      logLevel:
        description: "Log level"
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug
      tag:
        description: "Apply tag after successful test run"
        required: true
        type: boolean
      environment:
        description: "Environment to run tests against"
        required: true
        type: environment

jobs:
  MyFirstJob:
    runs-on: ubuntu-latest

    steps:

      - run: |
          echo "Home drive: ${{ inputs.homedrive }}"
          echo "Log level: ${{ inputs.logLevel }}"
          echo "Tag source: ${{ inputs.tag }}"
          echo "Environment: ${{ inputs.environment }}"
        name: Workflow Inputs
        if: ${{ github.event_name == 'workflow_dispatch' }}

      - run: |
          echo "Payload:"
          echo "$(echo '${{ toJson(github.event.client_payload) }}')"
        name: Payload
        if: ${{ github.event_name == 'repository_dispatch' }}

      - name: Print commit sha
        run: "echo Commit SHA: ${{ github.sha}}"

      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Greet someone
        uses: ./
        with:
          who-to-greet: ${{ github.actor }}  # action.yml in root of the repository

      - name: List files in the repository
        run: |
          echo "The repository ${{ github.repository }} contains the following files:"
          tree

  deploy:
    if: ${{ github.ref == 'refs/heads/main'}}
    runs-on: ubuntu-latest
    needs: MyFirstJob
    steps:
      - run: "echo Deploying branch ${{ github.ref }}"

  job_1:
    runs-on: ubuntu-latest
    steps:
      - run: "echo Job: ${{ github.job }}"
  
  job_2:
    runs-on: ubuntu-latest
    needs: job_1
    steps:
      - run: "echo Job: ${{ github.job}}"

  job_3:
    runs-on: ubuntu-latest
    needs: job_1
    steps:
      - run: "echo Job: ${{ github.job}}"

  job_4:
    runs-on: ubuntu-latest
    needs: [job_2, job_3]
    steps:
      - run: "echo Job: ${{ github.job}}"

  generate-a-secret-output:
    runs-on: ubuntu-latest
    steps:
      - id: sets-a-secret
        name: Generate, mask, and output a secret
        run: |
          the_secret=$((RANDOM))
          echo "::add-mask::$the_secret"
          echo "secret-number=$the_secret" >> "$GITHUB_OUTPUT"

      - name: Use that secret output (protected by a mask)
        run: |
          echo "the secret number is ${{ steps.sets-a-secret.outputs.secret-number }}"

  generate-a-environment-output:
    runs-on: ubuntu-latest
    steps:
      - name: Set the value
        id: step_one
        run: |
          echo "action_state=yellow" >> "$GITHUB_ENV"

      - name: Use the value
        run: |
          echo "The action state is ${{ env.action_state }}"
  
  generate-a-job-summary:
    runs-on: ubuntu-latest
    steps:
      - name: Set the job summary
        run: |
          echo '### Hello world! :rocket:' >> $GITHUB_STEP_SUMMARY
          echo '### Love this feature! :medal_sports:' >> $GITHUB_STEP_SUMMARY
          echo '<h1>Great feature!</h1>' >> $GITHUB_STEP_SUMMARY

      - name: Write Summary from Action
        uses: actions/github-script@v7
        with:
          script: |
            await core.summary
            .addHeading('Test Results')
            .addTable([
              [{data: 'File', header: true}, {data: 'Result', header: true}],
              ['foo.js', 'Pass ✅'],
              ['bar.js', 'Fail ❌'],
              ['test.js', 'Pass ✅']
            ])
            .addLink('View staging deployment!', 'https://github.com')
            .write()
